using System;

using NFX;
using NFX.ApplicationModel;
using NFX.DataAccess.CRUD;

namespace Zhaba.Data.Rows
{
  public abstract class ZhabaRow : AmorphousTypedRow
  {
    protected ZhabaRow() : base() { }

    /// <summary>
    /// Disable for security
    /// </summary>
    public override bool AmorphousDataEnabled { get { return false; } }

    /// <summary>
    /// Generates new ID properly scoping it and naming it for this row
    /// </summary>
    public virtual ulong GenerateNewID()
    {
      var sequenceName = this.GetType().Name.Replace("Row", string.Empty);
      return ZApp.Data.SequenceProvider.GenerateOneSequenceID(Consts.ZHABA_SCOPE, sequenceName);
    }
  }

  /// <summary>
  /// Specifies when ulong PK will be created
  /// </summary>
  public enum RowULongPKAction
  {
    /// <summary>
    /// GDID will be generated by ValidateAndPrepareForStore() when there are no validation errors
    /// </summary>
    Default = 0,

    /// <summary>
    /// Ulong D will be generated by ctor immediately, in this case if Validate fails then new ID may be wasted if row instance is discarded
    /// </summary>
    CtorGenerateNewID
  }

  /// <summary>
  /// Zhaba rows with PK GDID
  /// </summary>
  public abstract class ZhabaRowWithULongPK : ZhabaRow
  {
    protected ZhabaRowWithULongPK() : base() { }
    protected ZhabaRowWithULongPK(RowULongPKAction action)
    {
      if (action == RowULongPKAction.CtorGenerateNewID)
      {
        Counter = GenerateNewID();
        ApplyDefaultFieldValues();
      }
    }

    [Field(key: true, required: true, visible: false)]
    public ulong Counter { get; set; }

    public Exception ValidateAndPrepareForStore(string targetName = null)
    {
      if (targetName.IsNullOrWhiteSpace()) targetName = App.DataStore.TargetName;

      DoPrepareForStorePreValidate(targetName);

      var verror = this.Validate(targetName);
      if (verror != null) return verror;

      DoPrepareForStorePostValidate(targetName);

      if (Counter == 0)
        return new CRUDFieldValidationException(this, "Counter", "Counter PK Value is required in row " + GetType().Name);

      return null;
    }

    public override Exception ValidateField(string targetName, Schema.FieldDef fdef)
    {
      if (fdef.Name.EqualsIgnoreCase("GDID")) return null;//Skip GDID field validation
      return base.ValidateField(targetName, fdef);
    }


    /// <summary>
    /// Override to perform extra work before row gets validated before written to store.
    /// </summary>
    protected virtual void DoPrepareForStorePreValidate(string targetName)
    {

    }

    /// <summary>
    /// Override to perform extra work before row gets written to store after successfull validate.
    /// The default implementation generates GDID if it was not generated yet
    /// </summary>
    protected virtual void DoPrepareForStorePostValidate(string targetName)
    {
      if (this.Counter == 0) Counter = GenerateNewID();
    }
  }
}
