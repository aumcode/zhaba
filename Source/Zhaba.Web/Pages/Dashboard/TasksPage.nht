#<laconf>
 compiler
 {
   using { ns="System" }
   using { ns="System.Linq" }
   using { ns="System.Collections.Generic" }
   using { ns="NFX" }
   using { ns="NFX.Wave" }
   using { ns="NFX.Wave.Templatization" }
   using { ns="Zhaba" }
   using { ns="Zhaba.Data.Rows" }
   using { ns="Zhaba.Security.Permissions" }
   base-class-name="Zhaba.Web.Pages.Master"
   namespace="Zhaba.Web.Pages.Dashboard"
 }
#</laconf>

#[override renderStyles()]
<style>

.rTable {
  	display: table;
  	width: 100%;
}
.rTableRow {
  	display: table-row;
}
.rTableHeading {
  	display: table-header-group;
  	background-color: #ddd;
}
.rTableCell, .rTableHead {
  	display: table-cell;
  	padding: 3px 10px;
  	border: 1px solid #999999;
}
.rTableHeading {
  	display: table-header-group;
  	background-color: #ddd;
  	font-weight: bold;
}
.rTableFoot {
  	display: table-footer-group;
  	font-weight: bold;
  	background-color: #ddd;
}
.rTableBody {
  	display: table-row-group;
}
div.colspan,div.colspan+div.rTableCell
{
    border:0;
}

div.colspan>div
{
    width:1px;
}

div.colspan>div>div
{
    position:relative;
    width:1500px;
    overflow:hidden;
}

  .wvDetailsContentHidden{
    display:none;
  }

  .expander {
    border: 2px solid gray;
    background : green;
  }

  .header {
    color: white;
  }

  .text {
    
  }

  .container {
    display : inline;
    margin: 5px;
  }

  .details {
    width: 100%;
    height : 60px;
    background : white;
  }

  .completeness {
    position: relative;
    background: white;
  }

  .bar{
    text-align: center;
    position: absolute;
    top: 0;
    bottom: 0;
    left: 0;
  }

  .issue_id {
  }

</style>

#[override renderBody()]
<div class="grid">
    <div id="title">
      <div>Tasks</div>
    </div>
    <form id="frmFilter" data-wv-rid="V1" novalidate>
      <div class="fView" data-wv-fname="AsOf"></div>
      <div class="fView" data-wv-fname="Due" data-wv-ctl="combo"></div>
      @[if (new PMPermission().Check()) {]
      <div class="fView" data-wv-fname="ProjectName" data-wv-ctl="combo"></div>
      <div class="fView" data-wv-fname="C_USER" data-wv-ctl="combo"></div>
      @[}]
      <div class="fView" data-wv-fname="Search" style="width: 1000px"></div>
    </form>
    <div id="grid"></div>

</div>

#[override renderScripts()]
<script>

  @[if(new PMPermission().Check()) {]
  var pmperm = true;
  @[} else {]
  var pmperm = false;
  @[}]

  WAVE.GUI.SUPPRESS_UNLOAD_CHECK = false;

  var tasks, categories;
  var REC = null;
  var RECV = null;

  WAVE.ajaxGetJSON(
    "/dashboard/tasks",
    null,
    function (resp) {
      let data = JSON.parse(resp);
      tasks = data.Rows;
      console.log(tasks);
      renderTasks("grid");
      initDetails();
      // initTexts();
    },
    function (resp) { console.log("error"); },
    function (resp) { console.log("fail"); });

  WAVE.ajaxGetJSON(
    "/dashboard/taskfilter",
    null,
    function (resp) { 
      REC = new WAVE.RecordModel.Record(JSON.parse(resp));
      RVIEW = new WAVE.RecordModel.RecordView("V1", REC);

      REC.eventBind(WAVE.RecordModel.EVT_DATA_CHANGE, function(sender, phase, oldv, newv){
        if (phase==WAVE.RecordModel.EVT_PHASE_AFTER) scheduleFetch();
      });
    },
    function (resp) { console.log("error"); },
    function (resp) { console.log("fail"); });

  var timerID = null;

  function scheduleFetch(){
    var expanded = [];
    var detailsList = document.getElementsByClassName("details");
    var j=0;
    for(var i=0, l=detailsList.length; i<l; i++) {
      if(detailsList[i].classList.contains('wvDetailsContentVisible')) {
        expanded[j++] = detailsList[i].id;
      }

    }
    WAVE.ajaxPostJSON(
      "/dashboard/taskfilter",
      REC.data(),
      function (resp) {
        let data = JSON.parse(resp);
        tasks = data.Rows;
        console.log(tasks);
        renderTasks("grid");
        initDetails();
        for(var i=0, l=expanded.length; i<l; i++) {
          var item = document.getElementById(expanded[i]);
          item.classList.toggle('wvDetailsContentVisible', true);
          item.classList.toggle('wvDetailsContentHidden', false);
        }
      },
      function (resp) { console.log("error"); },
      function (resp) { console.log("fail"); });
  }

  function getStyle(value){
    var color = 'white';
    if(value <= 20)
      color = 'red';
    else if(value > 20 && value <=40)
      color = 'orange';
    else if(value > 40 && value <=60)
      color = 'yellow';
    else if(value > 60 && value <=80)
      color = 'lightgreen';
    else if(value == 100)
      color = 'green';
    return 'width: ' + value + '%;' + ' background: ' + color; 
  }

  function getStatusStyle(value){
    var color = 'white';
    if(value == 'New')
      color = 'red';
    else if(value == 'Reopen')
      color = 'orange';
    else if(value == 'Assigned')
      color = 'yellow';
    else if(value == 'Defer')
      color = 'black';
    else if(value == 'Done')
      color = 'lightgreen';
    else if(value == 'Closed')
      color = 'gray';
    return 'color: ' + color; 
  }

  function renderTasks(root){
    clearGrid();
    /***
    div{
      class = "rTable"
      div 
      {
        class="rTableRow"
        div="ID" {class="rTableHead"}
        div="Progress" {class="rTableHead"}
        div="Status" {class="rTableHead"}
        div="Start" {class="rTableHead"}
        div="Plan/Due" {class="rTableHead"}
        div="Complete" {class="rTableHead"}
        div="Assigned" {class="rTableHead"}
        div="Project" {class="rTableHead"}
        div="Issue" {class="rTableHead"}
      }
      "? for(var i = 0, l = tasks.length; i<l; i++)" {
          div
          {
              id=?tasks[i].Counter
              class="expander rTableRow"
              
              div="?tasks[i].Counter"{ class="issue_id rTableCell" align="right" }
              div 
              { 
                  class="rTableCell completeness" 
                  div="?tasks[i].Completeness" 
                  { 
                    class="bar" 
                    style="?getStyle(tasks[i].Completeness)" 
                  }
              }
              div="?tasks[i].Status"{ class="rTableCell" style="?getStatusStyle(tasks[i].Status)" }
              div="?WAVE.dateTimeToString(tasks[i].Start_Date, WAVE.DATE_TIME_FORMATS.SHORT_DATE_TIME)"{ class="rTableCell" }
              div="?WAVE.dateTimeToString(tasks[i].Plan_Date, WAVE.DATE_TIME_FORMATS.SHORT_DATE_TIME)"{ class="rTableCell" }
              div="?WAVE.dateTimeToString(tasks[i].Complete_Date, WAVE.DATE_TIME_FORMATS.SHORT_DATE_TIME)"{ class="rTableCell" }
              div=?tasks[i].Note { class="rTableCell" }
              div="?tasks[i].ProjectName"{ class="rTableCell" }
              div="?tasks[i].Name"{ class="rTableCell" }
          }
          div
          {
            id="?'details-'+tasks[i].Counter"
            class="details rTableRow"
            div
            {
              class="rTableCell colspan"
              div
              {
                div
                {
                  "?if(pmperm)" {
                    //a = 'Add Assignee' { href="?'javascript:addAssignee('+tasks[i].C_Project+', '+tasks[i].Counter+')'"  class="button" }
                    a = 'Defer' { href="?'javascript:deferIssue('+tasks[i].C_Project+', '+tasks[i].Counter+')'"  class="button" }
                    a = 'Close' { href="?'javascript:closeIssue('+tasks[i].C_Project+', '+tasks[i].Counter+')'" class="button" }
                    a = 'Reopen' { href="?'javascript:reopenIssue('+tasks[i].C_Project+', '+tasks[i].Counter+')'"  class="button" }
                  }
                  "? if(tasks[i].Status != 'Closed')" { 
                    form
                    {
                      id="?'form-'+tasks[i].Counter"

                      div="Progress:" { input{name="completeness" class="text" type="text" value=?tasks[i].Completeness } }
                      div="Description:"{ textarea="?tasks[i].Description" { name="description" class="text"} }

                      a="Send" { href="?'javascript:changeProgress('+tasks[i].C_Project+', '+tasks[i].Counter+')'"  class="button" }
                    }
                  }
                  div 
                  {
                    id="?'detailsTable-'+tasks[i].Counter"
                    class = "rTable"
                    div 
                    {
                      class="rTableRow"
                      div="ID" {class="rTableHead"}
                      div="Progress" {class="rTableHead"}
                      div="Status" {class="rTableHead"}
                      div="Start" {class="rTableHead"}
                      div="Plan/Due" {class="rTableHead"}
                      div="Complete" {class="rTableHead"}
                      div="Assigned" {class="rTableHead"}
                      div="Project" {class="rTableHead"}
                      div="Issue" {class="rTableHead"}
                    }
                    "? for(var j = 0, k = tasks[i].Details.length; j<k; j++)" {
                      div
                      {
                          id="?'detailsRow-'+tasks[i].Details[j].Counter"
                          class="rTableRow"
              
                          div="?tasks[i].Details[j].Counter"{ class="rTableCell" align="right" }
                          div="?tasks[i].Details[j].Completeness" { class="rTableCell" }
                          div="?tasks[i].Details[j].Status"{ class="rTableCell" }
                          div="?WAVE.dateTimeToString(tasks[i].Details[j].Start_Date, WAVE.DATE_TIME_FORMATS.SHORT_DATE_TIME)"{ class="rTableCell" }
                          div="?WAVE.dateTimeToString(tasks[i].Details[j].Plan_Date, WAVE.DATE_TIME_FORMATS.SHORT_DATE_TIME)"{ class="rTableCell" }
                          div="?WAVE.dateTimeToString(tasks[i].Details[j].Complete_Date, WAVE.DATE_TIME_FORMATS.SHORT_DATE_TIME)"{ class="rTableCell" }
                          div=?tasks[i].Details[j].Note { class="rTableCell" }
                          div="?tasks[i].Details[j].ProjectName"{ class="rTableCell" }
                          div="?tasks[i].Details[j].Name"{ class="rTableCell" }
                      }
                    }
                  }
                }
              }
            }
          }
      }
    }
    ***/
  }

  function initDetails(){
    var expanders = document.getElementsByClassName("expander");
    for(var i = 0 , l=expanders.length; i<l; i++){
      var id = "details-"+expanders[i].id;
      var content =document.getElementById(id);
      var details = new WAVE.GUI.Details({ 
          titleCtrl: expanders[i], 
          contentCtrl: content,
          hideOnClick: false
      });
    }
  }
  
  /**
  function textChanged(e){
      var q = e.path[1];
      var iid = 0;
      if($(q).find('.issue_id').length == 1) {
        iid = parseInt($(q).find('.issue_id')[0].outerText);
      }
      var data = { issueCounter : iid, value :  e.target.value}
      WAVE.ajaxPostJSON(
      "/dashboard/changeprogress",
      data,
      function (resp) { console.log("success");},
      function (resp) { console.log("error"); },
      function (resp) { console.log("fail"); });
  }
  **/
  /**
  function initTexts(){
    var texts = document.getElementsByClassName("text");
    for(var i = 0 , l=texts.length; i<l; i++){
      var text = texts[i];
      WAVE.addEventHandler(text, "change", textChanged);
    }
  }
  **/
  function clearGrid(){
    document.getElementById("grid").innerHTML = "";
  }

  function closeIssue(pid, iid) {
    var link = ZHB.URIS.ForDELETE_ISSUE(pid, iid);
    WAVE.GUI.showConfirmationDialog(
      'Close issue',
      'Are you sure? \n ' + grid.SELECTED_ROW_DATA,
      [WAVE.GUI.DLG_YES, WAVE.GUI.DLG_NO],
      function(sender, result) {
        if(result == WAVE.GUI.DLG_YES) {
          WAVE.ajaxCall(
          'DELETE',
          link,
          null,
          function (resp) { scheduleFetch();  console.log("success"); },
          function (resp) { console.log("error"); },
          function (resp) { console.log("fail"); },
          WAVE.CONTENT_TYPE_JSON_UTF8, 
          WAVE.CONTENT_TYPE_JSON_UTF8
          );
        } 
      return true;
      });
  }

  function deferIssue(pid, iid) {
    var link = ZHB.URIS.ForDEFER_ISSUE(pid, iid);
    WAVE.ajaxCall(
      'GET',
      link,
      null,
      function (resp) { scheduleFetch();  console.log("success"); },
      function (resp) { console.log("error"); },
      function (resp) { console.log("fail"); },
      WAVE.CONTENT_TYPE_JSON_UTF8, 
      WAVE.CONTENT_TYPE_JSON_UTF8
    );
  }

  function reopenIssue(pid, iid) {
    var link = ZHB.URIS.ForREOPEN_ISSUE(pid, iid);
    WAVE.ajaxCall(
      'GET',
      link,
      null,
      function (resp) { scheduleFetch();  console.log("success"); },
      function (resp) { console.log("error"); },
      function (resp) { console.log("fail"); },
      WAVE.CONTENT_TYPE_JSON_UTF8, 
      WAVE.CONTENT_TYPE_JSON_UTF8
    );
  }

  function addAssignee(pid, iid) {
    console.log(pid);
    console.log(iid);
    debugger;
  }

  function changeProgress(pid, iid) {
    var data = {
      issueCounter: iid,
      value: document.getElementById('form-'+iid).completeness.value, 
      description: document.getElementById('form-'+iid).description.value
    };
    console.log(data);
    WAVE.ajaxCall(
      'POST',
      "/dashboard/changeprogress",
      data,
      function (resp) { scheduleFetch();  console.log("success"); },
      function (resp) { console.log("error"); },
      function (resp) { console.log("fail"); },
      WAVE.CONTENT_TYPE_JSON_UTF8, 
      WAVE.CONTENT_TYPE_JSON_UTF8
    );
  }
  
  var tickTime = 300000;
  var timerId = setTimeout(function tick() {
    scheduleFetch();
    timerId = setTimeout(tick, tickTime);
  }, tickTime);
</script>