#<laconf>
 compiler
 {
   using { ns="System" }
   using { ns="System.Linq" }
   using { ns="System.Collections.Generic" }
   using { ns="NFX" }
   using { ns="NFX.Wave" }
   using { ns="NFX.Wave.Templatization" }
   using { ns="Zhaba" }
   using { ns="Zhaba.Data.Rows" }
   using { ns="Zhaba.Security.Permissions" }
   using { ns="Zhaba.Data.Domains" }
   base-class-name="Zhaba.Web.Pages.Master"
   namespace="Zhaba.Web.Pages.Dashboard"
 }
#</laconf>

#[class]
public TasksPage(string filterVector)
{
  m_FilterVector = filterVector;
}

private readonly string m_FilterVector;

#[override renderBody()]
<div class="grid" id="tasksPage">
    <div id="title">
      <div>Tasks</div>
    </div>
    <form id="frmFilter" data-wv-rid="V1" novalidate>
      <div class="fView filter" data-wv-fname="AsOf"></div>
      <div class="fView filter" data-wv-fname="Due" data-wv-ctl="combo"></div>
      <div class="fView big-filter" data-wv-fname="Status" data-wv-ctl="combo"></div>
      <div class="fView big-filter" data-wv-fname="CategoryName" data-wv-ctl="combo"></div>
      @[if (new PMPermission().Check()) {]
      <div class="fView big-filter" data-wv-fname="ProjectName" data-wv-ctl="combo"></div>
      <div class="fView big-filter" data-wv-fname="C_USER" data-wv-ctl="combo"></div>
      @[}]
      <div class="fView" data-wv-fname="Search" style="width: 1000px"></div>
    </form>
    @[if(SelectedProject != null && new PMPermission().Check()) {]
    <div style="margin-bottom: 4px; padding-left: 14px">
      <a class="button" href='javascript:addIssue(@[Target.Write(SelectedProject.Counter);])' >Add issue</a>
    </div>
    @[}]
    <div id="roster" class="rst-table"></div>
</div>

#[override renderScripts()]
<script>

  WAVE.onReady(ZHB.Tasks.init({
    filter: ?[:m_FilterVector],
    pmPerm: WAVE.strAsBool("?[new PMPermission().Check()]")
  }));

  var tasks, categories;
  var statuses = { N: 'New', R: 'Reopen', A: 'Assign', D: 'Done', F: 'Defer', C: 'Close', X: 'Cancel' };









  function reopenIssue(pid, iid) {
    var link = ZHB.URIS.ForREOPEN_ISSUE(pid, iid);
    WAVE.ajaxCall(
      'GET',
      link,
      null,
      function (resp) { ZHB.Tasks.scheduleFetch();   },
      function (resp) { console.log("error"); },
      function (resp) { console.log("fail"); },
      WAVE.CONTENT_TYPE_JSON_UTF8,
      WAVE.CONTENT_TYPE_JSON_UTF8
    );
  }

  function changeProgress(pid, iid) {
    changeProgress(pid, iid, document.getElementById('prog'+iid).value, document.getElementById('desc'+iid).value);
  }

  function changeProgress(pid, iid, progress, description) {
    var data = {
      issueCounter: iid,
      value: progress,
      description: description
    };
    // console.log(data);
    WAVE.ajaxCall(
      'POST',
      "/dashboard/changeprogress",
      data,
      function (resp) { ZHB.Tasks.scheduleFetch();   },
      function (resp) { console.log("error"); },
      function (resp) { console.log("fail"); },
      WAVE.CONTENT_TYPE_JSON_UTF8,
      WAVE.CONTENT_TYPE_JSON_UTF8
    );
  }

  function changeStatusDialog(status, pid, iid) {
    if(status == 'A') {
      getIssueAssignForm(pid, iid, "");
    } else {
      getOtherForm(status, pid, iid);
    }
  }

  function changeStatus(pid, iid, status, note) {
    var data = {
      C_Project: pid,
      C_Issue: iid,
      status: status,
      note: note
    }
    WAVE.ajaxCall(
      'POST',
      "/dashboard/changestatus",
      data,
      function (resp) {
        ZHB.Tasks.scheduleFetch();

      },
      function (resp) { console.log("error"); },
      function (resp) { console.log("fail"); },
      WAVE.CONTENT_TYPE_JSON_UTF8,
      WAVE.CONTENT_TYPE_JSON_UTF8
    );
  }

  function changeAssignStatus(pid, iid, status, data) {
    var link = ZHB.URIS.ForISSUE_ISSUEASSIGN(pid, iid, null);
     WAVE.ajaxCall(
          'POST',
          link,
          data,
          function (resp) {
            ZHB.Tasks.scheduleFetch();

          },
          function (resp) { console.log("error"); },
          function (resp) { console.log("fail"); },
          WAVE.CONTENT_TYPE_JSON_UTF8,
          WAVE.CONTENT_TYPE_JSON_UTF8
        );
  }

  function buildIssueAssignPopUpDialog(rec, pid, iid) {
    var dlg = new WAVE.GUI.Dialog({
        header: 'Change state to ' + statuses[status],
        body: buildIssueAssigneeStatusBody(),
        footer: buildStatusFooter(),
        onShow: function() {
          var rv = new WAVE.RecordModel.RecordView("V2", rec);
        },
        onClose: function(dlg, result) {
          if(result==WAVE.GUI.DLG_CANCEL) return WAVE.GUI.DLG_CANCEL;
          rec.validate();
          if (!rec.valid()) return WAVE.GUI.DLG_UNDEFINED
          json = rec.data();
          note = rec.data().Description;
          changeAssignStatus(pid, iid, status, rec.data());
          return WAVE.GUI.DLG_CANCEL;
        }
      });
  }

  function buildPopUpDialog(status, rec, pid, iid) {
    var dlg = new WAVE.GUI.Dialog({
        header: 'Change state to ' + statuses[status],
        body: buildStatusBody(),
        footer: buildStatusFooter(),
        onShow: function() {
          var rv = new WAVE.RecordModel.RecordView("V2", rec);
        },
        onClose: function(dlg, result) {
          if(result==WAVE.GUI.DLG_CANCEL) return WAVE.GUI.DLG_CANCEL;
          rec.validate();
          if (!rec.valid()) return WAVE.GUI.DLG_UNDEFINED
          json = rec.data();
          note = rec.data().Description;
          changeStatus(pid, iid, status, note)
          return WAVE.GUI.DLG_CANCEL;
        }
      });
  }

  function buildIssueAssigneeStatusBody() {
    /***
        div
        {
          id="statusForm"
          data-wv-rid="V2"
          div { data-wv-fname="C_User" class="fView" data-wv-ctl="combo"}
          div { data-wv-fname="Open_TS" class="fView" }
          div { data-wv-fname="Close_TS" class="fView" }
          div { data-wv-fname="Description" class="fView" type="text" }
        }
      ***/

  }

  function buildStatusBody(status) {
    /***
      div
      {
        id="statusForm"
        data-wv-rid="V2"
        div { data-wv-fname="Description" class="fView" }
      }
    ***/
  }

  function buildStatusFooter() {
    /***
      div
      {
        align="right"
        style="margin: 5px"
        a="ok" {href="javascript:WAVE.GUI.currentDialog().ok()" style="margin: 5px; padding: 2px; width: 75px; height: 23px" class="button"}
        a="cancel" {href="javascript:WAVE.GUI.currentDialog().cancel()" style="margin: 5px; padding: 2px; width: 75px; height: 23px" class="button"}
      }

    ***/
  }

  function getIssueAssignForm(pid, iid, iaid) {
    var link = ZHB.URIS.ForISSUE_ISSUEASSIGN(pid, iid, iaid);
    WAVE.ajaxCall(
      'GET',
      link,
      null,
      function (resp) {

        var _rec = new WAVE.RecordModel.Record(JSON.parse(resp));
        buildIssueAssignPopUpDialog(_rec, pid, iid);
      },
      function (resp) { console.log("error");},
      function (resp) { console.log("fail"); },
      WAVE.CONTENT_TYPE_JSON_UTF8,
      WAVE.CONTENT_TYPE_JSON_UTF8
    );
  }

  function getOtherForm1(e) {
    var status = e.target.dataset.nextstate;
    var pid = e.target.dataset.cproject;
    var iid = e.target.dataset.counter;
    getOtherForm(status, pid, iid);
  }

  function getOtherForm(status, pid, iid) {
    var link = ZHB.URIS.ForISSUE_STATUSNOTE(pid, iid, status);
    WAVE.ajaxCall(
      'GET',
      link,
      null,
      function (resp) {


        var _rec = new WAVE.RecordModel.Record(JSON.parse(resp));
        buildPopUpDialog(status, _rec, pid, iid);
      },
      function (resp) { console.log("error"); },
      function (resp) { console.log("fail"); },
      WAVE.CONTENT_TYPE_JSON_UTF8,
      WAVE.CONTENT_TYPE_JSON_UTF8
    );

  }

  function changeStatusDialog1(a) {
    changeStatusDialog(a.target.dataset.nextstate, a.target.dataset.cproject, a.target.dataset.counter)
  }

  function buildProgressBody() {
    /***
      div
      {
        id="progressForm"
        data-wv-rid="V3"
        div { data-wv-fname="Value" class="fView" }
        div { data-wv-fname="Description" class="fView" }
      }
    ***/
  }

  function buildIssueBody() {
  /***
    div
    {
      id="editIssueForm"
      data-wv-rid="V6"

      div { class="fView" data-wv-fname="Name" }
      div { class="fView" data-wv-fname="Start_Date" }
      div { class="fView" data-wv-fname="Due_Date" }
      div { class="fView" data-wv-fname="C_Milestone" data-wv-ctl="combo" }
      div { class="fView" data-wv-fname="C_Category" data-wv-ctl="combo" }
      div { class="fView" data-wv-fname="Priority" }

    }
  ***/
  }

  function changeProgress1(e) {
    var status = e.target.dataset.status;
    if(status == 'C' || status == 'X') return;
    var pid = e.target.dataset.cproject;
    var iid = e.target.dataset.cissue;
    var rec = new WAVE.RecordModel.Record(
      { ID: "REC_PROGRESS",
        fields: [
          {def: {Name: 'Value', Type: 'int', MinValue: 0, MaxValue: 100}, val: e.target.dataset.progress},
          {def: {Name: 'Description', Type: 'string', Size: 512, Required: false}, val: e.target.dataset.description},
        ]
      }
    );
    e.stopPropagation();
    var dlg = new WAVE.GUI.Dialog({
            header: 'Change progress',
            body: buildProgressBody(),
            footer: buildStatusFooter(),
            onShow: function() {
              var rv = new WAVE.RecordModel.RecordView("V3", rec);
            },
            onClose: function(dlg, result) {
              if(result==WAVE.GUI.DLG_CANCEL) return WAVE.GUI.DLG_CANCEL;
              rec.validate();
              if (!rec.valid()) return WAVE.GUI.DLG_UNDEFINED;
              changeProgress(pid,iid,  rec.data().Value, rec.data().Description)
              return WAVE.GUI.DLG_CANCEL;
            }
          });
  }

  function addIssue(pid) {
    editIssue(pid,"");
  }

  function editIssue(pid,iid) {
    var link = '/project/{0}/issue?id={1}'.args(pid, iid);
    WAVE.ajaxCall(
      'GET',
      link,
      null,
      function (resp) {


        var _rec = new WAVE.RecordModel.Record(JSON.parse(resp));
        buildIsueDialog(_rec, pid, iid);
      },
      function (resp) { console.log("error");},
      function (resp) { console.log("fail");},
      WAVE.CONTENT_TYPE_JSON_UTF8,
      WAVE.CONTENT_TYPE_JSON_UTF8
    );
  }

  function buildIsueDialog(rec, pid, iid) {
    var dlg = new WAVE.GUI.Dialog({
      header: 'Issue',
      body: buildIssueBody(),
      footer: buildStatusFooter(),
      onShow: function () {
        var rv = new WAVE.RecordModel.RecordView("V6", rec);
      },
      onClose: function(dlg, result) {
        if(result==WAVE.GUI.DLG_CANCEL) return WAVE.GUI.DLG_CANCEL;
        rec.validate();
        if (!rec.valid()) return WAVE.GUI.DLG_UNDEFINED;
        var link = '/project/{0}/issue?id={1}'.args(pid, iid);
        WAVE.ajaxCall(
          'POST',
          link,
          rec.data(),
          function (resp) {
            var _rec = new WAVE.RecordModel.Record(JSON.parse(resp));
            if (_rec.validationError()) {
              WAVE.GUI.toast(_rec.validationError(), 'error');
            } else {

              ZHB.Tasks.scheduleFetch();
              WAVE.GUI.currentDialog().close();
            }
          },
          function (resp) { console.log("error"); console.log(resp); },
          function (resp) { console.log("fail"); console.log(resp); },
          WAVE.CONTENT_TYPE_JSON_UTF8,
          WAVE.CONTENT_TYPE_JSON_UTF8
        );
        return WAVE.GUI.DLG_UNDEFINED;
      }
    });
  }


</script>