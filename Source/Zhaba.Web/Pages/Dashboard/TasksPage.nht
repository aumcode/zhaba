#<laconf>
 compiler
 {
   using { ns="System" }
   using { ns="System.Linq" }
   using { ns="System.Collections.Generic" }
   using { ns="NFX" }
   using { ns="NFX.Wave" }
   using { ns="NFX.Wave.Templatization" }
   using { ns="Zhaba" }
   using { ns="Zhaba.Data.Rows" }
   using { ns="Zhaba.Security.Permissions" }
   using { ns="Zhaba.Data.Domains" }
   base-class-name="Zhaba.Web.Pages.Master"
   namespace="Zhaba.Web.Pages.Dashboard"
 }
#</laconf>

#[class]
public TasksPage(string filterVector)
{
  m_FilterVector = filterVector;
}

private readonly string m_FilterVector;

#[override renderBody()]
<div class="grid" id="tasksPage">
    <div id="title">
      <div>Tasks</div>
    </div>
    <form id="frmFilter" data-wv-rid="V1" novalidate>
      <div class="fView filter" data-wv-fname="AsOf"></div>
      <div class="fView filter" data-wv-fname="Due" data-wv-ctl="combo"></div>
      <div class="fView big-filter" data-wv-fname="Status" data-wv-ctl="combo"></div>
      <div class="fView big-filter" data-wv-fname="CategoryName" data-wv-ctl="combo"></div>
      @[if (new PMPermission().Check()) {]
      <div class="fView big-filter" data-wv-fname="ProjectName" data-wv-ctl="combo"></div>
      <div class="fView big-filter" data-wv-fname="C_USER" data-wv-ctl="combo"></div>
      @[}]
      <div class="fView" data-wv-fname="Search" style="width: 1000px"></div>
    </form>
    @[if(SelectedProject != null && new PMPermission().Check()) {]
    <div style="margin-bottom: 4px; padding-left: 14px">
      <a class="button" href='javascript:ZHB.Tasks.Status.addIssue(@[Target.Write(SelectedProject.Counter);])' >Add issue</a>
    </div>
    @[}]
    <div id="roster" class="rst-table"></div>
</div>

#[override renderScripts()]
<script>

  WAVE.onReady(ZHB.Tasks.init({
    filter: ?[:m_FilterVector],
    pmPerm: WAVE.strAsBool("?[new PMPermission().Check()]")
  }));

  var tasks, categories;
  var statuses = { N: 'New', R: 'Reopen', A: 'Assign', D: 'Done', F: 'Defer', C: 'Close', X: 'Cancel' };

  function reopenIssue(pid, iid) {
    var link = ZHB.URIS.ForREOPEN_ISSUE(pid, iid);
    WAVE.ajaxCall(
      'GET',
      link,
      null,
      function (resp) { ZHB.Tasks.scheduleFetch();   },
      function (resp) { console.log("error"); },
      function (resp) { console.log("fail"); },
      WAVE.CONTENT_TYPE_JSON_UTF8,
      WAVE.CONTENT_TYPE_JSON_UTF8
    );
  }

  function changeProgress(pid, iid) {
    changeProgress(pid, iid, document.getElementById('prog'+iid).value, document.getElementById('desc'+iid).value);
  }

  function changeProgress(pid, iid, progress, description) {
    var data = {
      issueCounter: iid,
      value: progress,
      description: description
    };
    // console.log(data);
    WAVE.ajaxCall(
      'POST',
      "/dashboard/changeprogress",
      data,
      function (resp) { ZHB.Tasks.scheduleFetch();   },
      function (resp) { console.log("error"); },
      function (resp) { console.log("fail"); },
      WAVE.CONTENT_TYPE_JSON_UTF8,
      WAVE.CONTENT_TYPE_JSON_UTF8
    );
  }






 






  function buildProgressBody() {
    /***
      div
      {
        id="progressForm"
        data-wv-rid="V3"
        div { data-wv-fname="Value" class="fView" }
        div { data-wv-fname="Description" class="fView" }
      }
    ***/
  }

  function changeProgress1(e) {
    var status = e.target.dataset.status;
    if(status == 'C' || status == 'X') return;
    var pid = e.target.dataset.cproject;
    var iid = e.target.dataset.cissue;
    var rec = new WAVE.RecordModel.Record(
      { ID: "REC_PROGRESS",
        fields: [
          {def: {Name: 'Value', Type: 'int', MinValue: 0, MaxValue: 100}, val: e.target.dataset.progress},
          {def: {Name: 'Description', Type: 'string', Size: 512, Required: false}, val: e.target.dataset.description},
        ]
      }
    );
    e.stopPropagation();
    var dlg = new WAVE.GUI.Dialog({
            header: 'Change progress',
            body: buildProgressBody(),
            footer: buildStatusFooter(),
            onShow: function() {
              var rv = new WAVE.RecordModel.RecordView("V3", rec);
            },
            onClose: function(dlg, result) {
              if(result==WAVE.GUI.DLG_CANCEL) return WAVE.GUI.DLG_CANCEL;
              rec.validate();
              if (!rec.valid()) return WAVE.GUI.DLG_UNDEFINED;
              changeProgress(pid,iid,  rec.data().Value, rec.data().Description)
              return WAVE.GUI.DLG_CANCEL;
            }
          });
  }




</script>