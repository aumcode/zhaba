#<laconf>
 compiler
 {
   using { ns="System" }
   using { ns="System.Linq" }
   using { ns="System.Collections.Generic" }
   using { ns="NFX" }
   using { ns="NFX.Wave" }
   using { ns="NFX.Wave.Templatization" }
   using { ns="Zhaba" }
   using { ns="Zhaba.Data.Rows" }
   using { ns="Zhaba.Security.Permissions" }
   using { ns="Zhaba.Data.Domains" }
   base-class-name="Zhaba.Web.Pages.Master"
   namespace="Zhaba.Web.Pages.Dashboard"
 }
#</laconf>

#[override renderStyles()]
<style>

.rTable {
  	display: table;
  	width: 100%;
}
.rTableRow {
  	display: table-row;
}
.rTableHeading {
  	display: table-header-group;
  	background-color: #ddd;
}
.rTableCell, .rTableHead {
  	display: table-cell;
  	padding: 3px 10px;
  	border: 1px solid #999999;
}
.rTableHeading {
  	display: table-header-group;
  	background-color: #ddd;
  	font-weight: bold;
}
.rTableFoot {
  	display: table-footer-group;
  	font-weight: bold;
  	background-color: #ddd;
}
.rTableBody {
  	display: table-row-group;
}
div.colspan,div.colspan+div.rTableCell
{
    border:0;
}

div.colspan>div
{
    width:1px;
}

div.colspan>div>div
{
    position:relative;
    width:1500px;
    overflow:hidden;
}

  .wvDetailsContentHidden{
    display:none;
  }

  .expander {
    border: 2px solid gray;
    background : #cfddd0;
  }

  .header {
    color: white;
  }

  .text {
    
  }

  .container {
    display : inline;
    margin: 5px;
  }

  .details {
    width: 100%;
    height : 60px;
    background : white;
  }

  .completeness {
    position: relative;
    background: white;
  }

  .bar{
    position: absolute;
    top: 0;
    bottom: 0;
    left: 0;
  }

  .bar-value{
    position: absolute;
    width: 100%;
    left: 0;
  }

  .issue_id {
  }

  .wvTabsUl {
    list-style-type: none;
    padding: 0;
    margin-bottom: 4px;
    max-width: 600px;
  }

    .wvTabsUl li {
      border: 1px solid black;
      padding-left: 4px;
      padding-right: 4px;
      padding-bottom: 6px;
      cursor: pointer;
      margin-right: 4px;
      background-color: #f0f0f0;
      display: inline;
    }

  .wvTabsActive {
    border-bottom-color: #f0f0f0 !important;
    cursor: default !important;
  }

  .wvTabsContentContainer {
    border: 1px solid black;
    background-color: #f0f0f0;
  }

  .wvTabsContentDiv {
    background-color: white;
    max-height: 100%;
    height: 100%;
    padding: 5px;
    -moz-box-sizing: border-box;
    -webkit-box-sizing: border-box;
    box-sizing: border-box;
  }

  table, td {
    border: 1px solid black;
    border-collapse: collapse;
  }

  .wvTabDisabled {
    background-color: #98e4d1 !important;
    color: #ff8282 !important;
    cursor: default !important;
  }

  .wvTabsContentDivHidden {
    display: none;
  }

  .wvTabsContentDivShown {
    display: block;
  }

</style>

#[override renderBody()]
<div class="grid">
    <div id="title">
      <div>Tasks</div>
    </div>
    <form id="frmFilter" data-wv-rid="V1" novalidate>
      <div class="fView" data-wv-fname="AsOf"></div>
      <div class="fView" data-wv-fname="Due" data-wv-ctl="combo"></div>
      <div class="fView" data-wv-fname="CategoryName" data-wv-ctl="combo"></div>
      @[if (new PMPermission().Check()) {]
      <div class="fView" data-wv-fname="ProjectName" data-wv-ctl="combo"></div>
      <div class="fView" data-wv-fname="C_USER" data-wv-ctl="combo"></div>
      @[}]
      <div class="fView" data-wv-fname="Search" style="width: 1000px"></div>
    </form>
    <div id="grid"></div>

</div>

#[override renderScripts()]
<script>

  @[if(new PMPermission().Check()) {]
  var pmperm = true;
  @[} else {]
  var pmperm = false;
  @[}]

  var statuses ={N:'New', R: 'Reopen', A:'Assign', D:'Done', F:'Defer', C:'Close', X:'Cancel'};
  WAVE.GUI.SUPPRESS_UNLOAD_CHECK = false;

  var tasks, categories;
  var REC = null;
  var RECV = null;

  WAVE.ajaxGetJSON(
    "/dashboard/tasks",
    null,
    function (resp) {
      let data = JSON.parse(resp);
      tasks = data.Rows;
      console.log(tasks);
      renderTasks("grid");
      initDetails();
      // initTexts();
    },
    function (resp) { console.log("error"); },
    function (resp) { console.log("fail"); });

  WAVE.ajaxGetJSON(
    "/dashboard/taskfilter",
    null,
    function (resp) { 
      REC = new WAVE.RecordModel.Record(JSON.parse(resp));
      RVIEW = new WAVE.RecordModel.RecordView("V1", REC);

      REC.eventBind(WAVE.RecordModel.EVT_DATA_CHANGE, function(sender, phase, oldv, newv){
        if (phase==WAVE.RecordModel.EVT_PHASE_AFTER) scheduleFetch();
      });
    },
    function (resp) { console.log("error"); },
    function (resp) { console.log("fail"); });

  var timerID = null;

  function scheduleFetch(){
    var expanded = [];
    var detailsList = document.getElementsByClassName("details");
    var j=0;
    for(var i=0, l=detailsList.length; i<l; i++) {
      if(detailsList[i].classList.contains('wvDetailsContentVisible')) {
        expanded[j++] = detailsList[i].id;
      }

    }
    WAVE.ajaxPostJSON(
      "/dashboard/taskfilter",
      REC.data(),
      function (resp) {
        let data = JSON.parse(resp);
        tasks = data.Rows;
        console.log(tasks);
        renderTasks("grid");
        initDetails();
        for(var i=0, l=expanded.length; i<l; i++) {
          var item = document.getElementById(expanded[i]);
          debugger;
          if(item){
            item.classList.toggle('wvDetailsContentVisible', true);
            item.classList.toggle('wvDetailsContentHidden', false);
          }
        }
      },
      function (resp) { console.log("error"); },
      function (resp) { console.log("fail"); });
  }

  function getStatusBarStyle(value){
    var red = 0;
    var green = 0;
    var color = 'rgb({0},{1}, 0)';
    if(value <= 25)
      red = 255;
    else if(value > 25 && value < 65){
      red = 255;
      green = (value - 25) * 6;
    }
    else if(value == 65){
      red = 255;
      green = 255;
    }
    else if(value > 65){
      red = 255 - ((value - 65) * 7);
      green = 255;
    }
    else if(value == 100){
      red = 0;
      green = 255;
    }
    return 'width: ' + value + '%;' + ' background: ' + color.args(red, green); 
  }

  function getStatusStyle(value){
    var color = 'white';
    if(value == 'New')
      color = 'red';
    else if(value == 'Reopen')
      color = 'orange';
    else if(value == 'Assigned')
      color = 'yellow';
    else if(value == 'Defer')
      color = 'black';
    else if(value == 'Done')
      color = 'lightgreen';
    else if(value == 'Closed')
      color = 'gray';
    return 'color: ' + color; 
  }

  function renderTasks(root){
    clearGrid();
    createBody(root)
    createHeaders("table");
    for(var i = 0, l = tasks.length; i<l; i++)
    {
      var task = tasks[i];
      createRow("table", task);
      createRowDetails("table", task.Counter);
      createTabs("tabs-"+task.Counter, task);
    }
  }

  function initDetails(){
    var expanders = document.getElementsByClassName("expander");
    for(var i = 0 , l=expanders.length; i<l; i++){
      var id = "details-"+expanders[i].id;
      var content =document.getElementById(id);
      var details = new WAVE.GUI.Details({ 
          titleCtrl: expanders[i], 
          contentCtrl: content,
          hideOnClick: false
      });
    }
  }
  
  function clearGrid(){
    document.getElementById("grid").innerHTML = "";
  }

  function reopenIssue(pid, iid) {
    var link = ZHB.URIS.ForREOPEN_ISSUE(pid, iid);
    WAVE.ajaxCall(
      'GET',
      link,
      null,
      function (resp) { scheduleFetch();  console.log("success"); },
      function (resp) { console.log("error"); },
      function (resp) { console.log("fail"); },
      WAVE.CONTENT_TYPE_JSON_UTF8, 
      WAVE.CONTENT_TYPE_JSON_UTF8
    );
  }

  function changeProgress(pid, iid) {
    changeProgress(pid, iid, document.getElementById('prog'+iid).value, document.getElementById('desc'+iid).value);
  }
 
  function changeProgress(pid, iid, progress, description) {
    var data = {
      issueCounter: iid,
      value: progress, 
      description: description
    };
    console.log(data);
    WAVE.ajaxCall(
      'POST',
      "/dashboard/changeprogress",
      data,
      function (resp) { scheduleFetch();  console.log("success"); },
      function (resp) { console.log("error"); },
      function (resp) { console.log("fail"); },
      WAVE.CONTENT_TYPE_JSON_UTF8, 
      WAVE.CONTENT_TYPE_JSON_UTF8
    );
  }

  function changeStatusDialog(status, pid, iid) {
    if(status == 'A') {
      getIssueAssignForm(pid, iid, null);
    } else {
      getOtherForm(status, pid, iid);
    }


  }

  function changeStatus(pid, iid, status, note) {
    var data = { 
      C_Project: pid,
      C_Issue: iid,
      status: status, 
      note: note
    }
    WAVE.ajaxCall(
      'POST',
      "/dashboard/changestatus",
      data,
      function (resp) { 
        scheduleFetch();  
        console.log("success"); 
      },
      function (resp) { console.log("error"); console.log(resp); },
      function (resp) { console.log("fail"); console.log(resp); },
      WAVE.CONTENT_TYPE_JSON_UTF8, 
      WAVE.CONTENT_TYPE_JSON_UTF8
    );
  }
  
  function  changeAssignStatus(pid, iid, status, data) {
    var link = ZHB.URIS.ForISSUE_ISSUEASSIGN(pid, iid, null);
     WAVE.ajaxCall(
          'POST',
          link,
          data,
          function (resp) { 
            scheduleFetch();  
            console.log("success"); 
          },
          function (resp) { console.log("error"); console.log(resp); },
          function (resp) { console.log("fail"); console.log(resp); },
          WAVE.CONTENT_TYPE_JSON_UTF8, 
          WAVE.CONTENT_TYPE_JSON_UTF8
        ); 
  }

  function buildPopUpDialog(status, rec, pid, iid) {
    var dlg = new WAVE.GUI.Dialog({
        header: 'Change state to ' + statuses[status],
        body: buildStatusBody(status),
        footer: buildStatusFooter(),
        onShow: function() {
          var rv = new WAVE.RecordModel.RecordView("V2", rec);
        },
        onClose: function(dlg, result) {
          if(result==WAVE.GUI.DLG_CANCEL) return WAVE.GUI.DLG_CANCEL;
          rec.validate();
          if (!rec.valid()) return WAVE.GUI.DLG_UNDEFINED    
          json = rec.data(); 
          note = rec.data().Description;  
          if (status=='A') {
            changeAssignStatus(pid, iid, status, rec.data());
          } else {
            changeStatus(pid, iid, status, note)
          }
          return WAVE.GUI.DLG_CANCEL;
        }  
      });
  }

  function buildStatusBody(status) {
    if(status == 'A') {
    /***
      div
      {
        id="statusForm"
        data-wv-rid="V2"
        div { data-wv-fname="C_User" class="fView" data-wv-ctl="combo"}
        div { data-wv-fname="Open_TS" class="fView" }
        div { data-wv-fname="Close_TS" class="fView" }
        div { data-wv-fname="Description" class="fView" type="text" }
      }
    ***/
    } else {
    /***
      div
      {
        id="statusForm"
        data-wv-rid="V2"
        div { data-wv-fname="Description" class="fView" }
      }
    ***/
    }
  }

  function buildStatusFooter() {
    /***
      div
      {
        align="right"
        style="margin: 5px"
        a="ok" {href="javascript:WAVE.GUI.currentDialog().ok()" style="margin: 5px; padding: 2px; width: 75px; height: 23px" class="button"}
        a="cancel" {href="javascript:WAVE.GUI.currentDialog().cancel()" style="margin: 5px; padding: 2px; width: 75px; height: 23px" class="button"}
      }

    ***/
  }
  
  function getIssueAssignForm(pid, iid, iaid) {
    var link = ZHB.URIS.ForISSUE_ISSUEASSIGN(pid, iid, iaid);
    WAVE.ajaxCall(
      'GET',
      link,
      null,
      function (resp) { 
        console.log("success");
        console.log(resp); 
        var _rec = new WAVE.RecordModel.Record(JSON.parse(resp));
        buildPopUpDialog('A', _rec, pid, iid);
      },
      function (resp) { console.log("error"); console.log(resp); },
      function (resp) { console.log("fail"); console.log(resp); }, 
      WAVE.CONTENT_TYPE_JSON_UTF8, 
      WAVE.CONTENT_TYPE_JSON_UTF8
    );
  }

  function getOtherForm(status, pid, iid) {
    var link = ZHB.URIS.ForISSUE_STATUSNOTE(pid, iid, status); 
    WAVE.ajaxCall(
      'GET',
      link,
      null,
      function (resp) { 
        console.log("success");
        console.log(resp); 
        var _rec = new WAVE.RecordModel.Record(JSON.parse(resp));
        buildPopUpDialog(status, _rec, pid, iid);
      },
      function (resp) { console.log("error"); console.log(resp); },
      function (resp) { console.log("fail"); console.log(resp); }, 
      WAVE.CONTENT_TYPE_JSON_UTF8, 
      WAVE.CONTENT_TYPE_JSON_UTF8
    );

  }
  
  function changeStatusDialog1(a) {
    changeStatusDialog(a.target.dataset.nextstate, a.target.dataset.cproject, a.target.dataset.counter)
  }
  
  function buildProgressBody() {
    /***
      div
      {
        id="progressForm"
        data-wv-rid="V3"
        div { data-wv-fname="Value" class="fView" }
        div { data-wv-fname="Description" class="fView" }
      }    
    ***/
  }
  
  function changeProgress1(e) {
    var status = e.target.dataset.status;
    if(status == 'C' || status == 'X') return;
    var pid = e.target.dataset.cproject;
    var iid = e.target.dataset.cissue;
    var rec = new WAVE.RecordModel.Record(
      { ID: "REC_PROGRESS",
        fields: [
          {def: {Name: 'Value', Type: 'int', MinValue: 0, MaxValue: 100}, val: e.target.dataset.progress},
          {def: {Name: 'Description', Type: 'string', Size: 128, Required: false}, val: e.target.dataset.description},
        ]
      }
    );
    e.stopPropagation();
    var dlg = new WAVE.GUI.Dialog({
            header: 'Change progress',
            body: buildProgressBody(),
            footer: buildStatusFooter(),
            onShow: function() {
              var rv = new WAVE.RecordModel.RecordView("V3", rec);
            },
            onClose: function(dlg, result) {
              if(result==WAVE.GUI.DLG_CANCEL) return WAVE.GUI.DLG_CANCEL;
              rec.validate();
              if (!rec.valid()) return WAVE.GUI.DLG_UNDEFINED;
              changeProgress(pid,iid,  rec.data().Value, rec.data().Description)  
              return WAVE.GUI.DLG_CANCEL;
            }  
          });     
  }
  
  var tickTime = 300000;
  var timerId = setTimeout(function tick() {
    scheduleFetch();
    timerId = setTimeout(tick, tickTime);
  }, tickTime);
</script>